import { z } from "zod";

export const BookingStatusSchema = z.enum([
  "pending",
  "confirmed",
  "cancelled",
  "completed",
  "rejected"
]);

export type BookingStatus = z.infer<typeof BookingStatusSchema>;

export const BookingSchema = z.object({
  id: z.string().uuid(),
  listingId: z.string().uuid(),
  userId: z.string().uuid(),
  checkIn: z.coerce.date(),
  checkOut: z.coerce.date(),
  guests: z.number().int().positive(),
  status: BookingStatusSchema,
  totalAmount: z.number().positive(),
  currency: z.string().length(3),
  paymentStatus: z.enum(["pending", "paid", "failed", "refunded"]),
  paymentId: z.string().optional(),
  notes: z.string().optional(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
});

export type Booking = z.infer<typeof BookingSchema>;

export const CreateBookingSchema = BookingSchema.omit({
  id: true,
  status: true,
  paymentStatus: true,
  paymentId: true,
  createdAt: true,
  updatedAt: true
});

export type CreateBooking = z.infer<typeof CreateBookingSchema>;

export const ListingTypeEnum = z.enum([
  "graphic_design_course",
  "social_management_course",
  "web_hosting_service"
]);

export type ListingType = z.infer<typeof ListingTypeEnum>;

export const ListingSchema = z.object({
  id: z.string().uuid(),
  type: ListingTypeEnum,
  name: z.string(),
  description: z.string(),
  price: z.number().positive(),
  currency: z.string().length(3)
});

export type Listing = z.infer<typeof ListingSchema>;
